package visitor;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.eclipse.jdt.core.dom.ASTNode;
import org.eclipse.jdt.core.dom.ASTVisitor;
import org.eclipse.jdt.core.dom.AbstractTypeDeclaration;
import org.eclipse.jdt.core.dom.MethodDeclaration;
import org.eclipse.jdt.core.dom.Modifier;
import org.eclipse.jdt.core.dom.TypeDeclaration;
import graph.model.Builder.GModelBuilder;
import graph.model.GConnection;
import graph.model.GNode;
import graph.model.GClassNode;
import graph.model.GMethodNode;

public class MoveMethodVisitor extends ASTVisitor {
	GNode pkgGNode;
	Map<String, GNode> nodeMap = new HashMap<String, GNode>();

	public MoveMethodVisitor(GNode pkgNode) {
		this.pkgGNode = pkgNode;
	}

	/**
	 * A type declaration is the union of a class declaration and an interface
	 * declaration.
	 */
	@Override
	public boolean visit(TypeDeclaration typeDecl) {
		GNode srcGNode = this.pkgGNode;
		List<?> modifiers = typeDecl.modifiers();
		String modStr = "";
		for (Object m : modifiers) {
			if (m instanceof Modifier) {
				Modifier mod = (Modifier) m;
				modStr = mod.getKeyword().toString();
			}
		}
		addConnection(srcGNode, typeDecl, modStr);
		return super.visit(typeDecl);
	}

	void addConnection(GNode srcGNode, ASTNode astNode, String conLabel) {
		// Set a node name
		String nodeName = getName(astNode);
		int startPos = astNode.getStartPosition();
		// Add a node
		GNode dstGNode = createGNode(astNode, nodeName);
		GModelBuilder.instance().getNodes().add(dstGNode);
		// Add a connection
		String conId = srcGNode.getId() + dstGNode.getId();
		// String conLabel = "offset: " + astNode.getStartPosition();
		GConnection con = new GConnection(conId, conLabel, srcGNode, dstGNode);
		GModelBuilder.instance().getConnections().add(con);
		srcGNode.getConnectedTo().add(dstGNode);
		// Update map
		nodeMap.put(nodeName + ":" + startPos, dstGNode);
	}

	String getName(ASTNode astNode) {
		if (astNode instanceof TypeDeclaration) {
			return ((TypeDeclaration) astNode).getName().getFullyQualifiedName();
		} else {
			return ((MethodDeclaration) astNode).getName().getFullyQualifiedName();
		}
	}

	GNode createGNode(ASTNode astNode, String nodeName) {
		String dstGNodeId = nodeName + astNode.getStartPosition();
		if (astNode instanceof TypeDeclaration) {
			return new GClassNode(dstGNodeId, nodeName, null);
		} else {
			return new GMethodNode(dstGNodeId, nodeName, null);
		}
	}

	@Override
	public boolean visit(MethodDeclaration methodDecl) {
		ASTNode astNodeObj = getOuterClass(methodDecl);

		if (astNodeObj instanceof TypeDeclaration) {
			TypeDeclaration typeNode = (TypeDeclaration) astNodeObj;
			String typeName = typeNode.getName().getFullyQualifiedName();
			int startPos = typeNode.getStartPosition();
			GNode typeGNode = nodeMap.get(typeName + ":" + startPos);
			if (typeGNode == null) {
				throw new RuntimeException();
			} else {
				addConnection(typeGNode, methodDecl, methodDecl.getReturnType2().toString());
			}
		}
		return super.visit(methodDecl);
	}

	public static ASTNode getOuterClass(ASTNode node) {
		do {
			// Keep searching if this node is not null and
			// it is not a type declaration node and
			// it is a child of compilation unit node.
			node = node.getParent();
		} while (node != null && node.getNodeType() != ASTNode.TYPE_DECLARATION && //
				((AbstractTypeDeclaration) node).isPackageMemberTypeDeclaration());
		return node;
	}
}

